{"ast":null,"code":"/*!\n * Oath - Node.js / browser event emitter.\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar assert = require('simple-assert');\n/*!\n * Primary exports\n */\n\n\nvar exports = module.exports = createThunk;\n/**\n * ### thunk(cb, [ctx])\n *\n * Create a thunk that can later be \"completed\".\n *\n * ```js\n * function async(cb) {\n *  var done = thunk(cb);\n *  setImmediate(done);\n *  return done.thunk;\n * }\n *\n * var res = async(next);\n * res(alsoNext);\n * ```\n *\n * @param {Function} first callback\n * @param {Object} context to invoke callback(s) with\n * @return {Function} completed handle\n * @api public\n */\n\nfunction createThunk(cb, ctx) {\n  var t = {\n    ctx: ctx || null,\n    res: null,\n    progress: {\n      total: null,\n      complete: null\n    },\n    listeners: {\n      complete: [],\n      error: [],\n      progress: []\n    }\n  };\n  /*!\n   * Scoped `.call` for invoke the callback chain.\n   * Returns a function that is to be called with\n   * an `{Array}` of callbacks to invoke.\n   *\n   * @param {Object} store\n   * @return {Function}\n   * @api private\n   */\n\n  var call = function (t) {\n    return function call(fns) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(t.ctx, t.res);\n      }\n    };\n  }(t);\n  /**\n   * #### done(err, [...])\n   *\n   * The function returned from `thunk` signals\n   * the completion of the thunk and is to be used\n   * within the async function that the thunk represents.\n   *\n   * @param {Error|null} if error\n   * @param {Mixed} repeatable result\n   * @api public\n   */\n\n\n  var done = function (t) {\n    return function thunk() {\n      assert(!Array.isArray(t.res), 'thunk has already completed');\n      var argv = t.res = [].slice.call(arguments);\n      var q = argv[0] ? t.listeners.error : t.listeners.complete;\n      return call(q);\n    };\n  }(t);\n\n  done.progress = function (t) {\n    return function (total, current) {\n      t.progess = {\n        total: total,\n        current: current\n      };\n      call(t.listeners.progress);\n      return this;\n    };\n  }(t);\n  /**\n   * #### done.thunk(cb)\n   *\n   * This method is used to stack callbacks\n   * for invocation upon completion. A function/method\n   * implementing thunks should return this function.\n   *\n   * @param {Function} callback to add to stack\n   * @api public\n   */\n\n\n  done.thunk = function (t) {\n    function addListener(ev, fn) {\n      assert(~['error', 'complete', 'progress'].indexOf(ev), 'invalid event listener key');\n      assert('function' === typeof fn, 'invalid event listener callback');\n      t.listeners[ev].push(fn);\n    }\n\n    function Oath(fn) {\n      if (!fn) return Oath;\n\n      if (Array.isArray(t.res)) {\n        assert('function' === typeof fn, 'invalid event listener callback');\n        call([fn]);\n      } else {\n        addListener('complete', fn);\n        addListener('error', fn);\n      }\n\n      return Oath;\n    }\n\n    Object.defineProperty(Oath, 'progress', {\n      get: function () {\n        return t.progress;\n      }\n    });\n    Object.defineProperty(Oath, 'onerror', {\n      set: function (fn) {\n        addListener('error', fn);\n      }\n    });\n    Object.defineProperty(Oath, 'oncomplete', {\n      set: function (fn) {\n        addListener('complete', fn);\n      }\n    });\n    Object.defineProperty(Oath, 'onprogress', {\n      set: function (fn) {\n        addListener('progress', fn);\n      }\n    });\n    return Oath;\n  }(t);\n\n  if (cb) done.thunk(cb);\n  return done;\n}\n/**\n * ### thunk.wrap(method, [source context], [target context])\n *\n * Convert a node-compatible standard async function\n * to a thunk-style function.\n *\n * ```js\n * // no context required\n * var read = thunk.wrap(fs.read);\n *\n * // contexts required\n * function Server() {\n *   var serv = this._handle = http.createServer();\n *   this.listen = thunk.wrap(serv.listen, serv, this);\n * }\n * ```\n *\n * @param {Function} function or method\n * @param {Mixed} source context (for method)\n * @param {Mixed} target context (for callbacks)\n * @return {Function} add callback to stack\n * @api public\n */\n\n\nexports.wrap = function (method, sctx, tctx) {\n  return function () {\n    var argv = [].slice.call(arguments);\n    var done = createThunk(null, tctx);\n    argv[argv.length] = done;\n    sctx = sctx || null;\n    method.apply(sctx, argv);\n    return done.thunk;\n  };\n};","map":{"version":3,"sources":["C:/Users/Sameer/Desktop/KeepClone/keep/node_modules/oath/index.js"],"names":["assert","require","exports","module","createThunk","cb","ctx","t","res","progress","total","complete","listeners","error","call","fns","i","length","apply","done","thunk","Array","isArray","argv","slice","arguments","q","current","progess","addListener","ev","fn","indexOf","push","Oath","Object","defineProperty","get","set","wrap","method","sctx","tctx"],"mappings":"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","sourcesContent":["/*!\n * Oath - Node.js / browser event emitter.\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar assert = require('simple-assert');\n\n/*!\n * Primary exports\n */\n\nvar exports = module.exports = createThunk;\n\n/**\n * ### thunk(cb, [ctx])\n *\n * Create a thunk that can later be \"completed\".\n *\n * ```js\n * function async(cb) {\n *  var done = thunk(cb);\n *  setImmediate(done);\n *  return done.thunk;\n * }\n *\n * var res = async(next);\n * res(alsoNext);\n * ```\n *\n * @param {Function} first callback\n * @param {Object} context to invoke callback(s) with\n * @return {Function} completed handle\n * @api public\n */\n\nfunction createThunk(cb, ctx) {\n  var t = {\n    ctx: ctx || null,\n    res: null,\n    progress: { total: null, complete: null },\n    listeners: { complete: [], error: [], progress: [] }\n  };\n\n  /*!\n   * Scoped `.call` for invoke the callback chain.\n   * Returns a function that is to be called with\n   * an `{Array}` of callbacks to invoke.\n   *\n   * @param {Object} store\n   * @return {Function}\n   * @api private\n   */\n\n  var call = (function(t) {\n    return function call(fns) {\n      for(var i = 0; i < fns.length; i++) {\n        fns[i].apply(t.ctx, t.res);\n      }\n    };\n  })(t);\n\n  /**\n   * #### done(err, [...])\n   *\n   * The function returned from `thunk` signals\n   * the completion of the thunk and is to be used\n   * within the async function that the thunk represents.\n   *\n   * @param {Error|null} if error\n   * @param {Mixed} repeatable result\n   * @api public\n   */\n\n  var done = (function(t) {\n    return function thunk() {\n      assert(!Array.isArray(t.res), 'thunk has already completed');\n      var argv = t.res = [].slice.call(arguments);\n      var q = argv[0] ? t.listeners.error : t.listeners.complete;\n      return call(q);\n    };\n  })(t);\n\n  done.progress = (function(t) {\n    return function(total, current) {\n      t.progess = { total: total, current: current };\n      call(t.listeners.progress);\n      return this;\n    }\n  })(t);\n\n  /**\n   * #### done.thunk(cb)\n   *\n   * This method is used to stack callbacks\n   * for invocation upon completion. A function/method\n   * implementing thunks should return this function.\n   *\n   * @param {Function} callback to add to stack\n   * @api public\n   */\n\n  done.thunk = (function(t) {\n    function addListener(ev, fn) {\n      assert(~[ 'error', 'complete', 'progress' ].indexOf(ev), 'invalid event listener key');\n      assert('function' === typeof fn, 'invalid event listener callback');\n      t.listeners[ev].push(fn);\n    }\n\n    function Oath(fn) {\n      if (!fn) return Oath;\n\n      if (Array.isArray(t.res)) {\n        assert('function' === typeof fn, 'invalid event listener callback');\n        call([ fn ]);\n      } else {\n        addListener('complete', fn);\n        addListener('error', fn);\n      }\n\n      return Oath;\n    }\n\n    Object.defineProperty(Oath, 'progress', {\n      get: function() { return t.progress; }\n    });\n\n    Object.defineProperty(Oath, 'onerror', {\n      set: function(fn) { addListener('error', fn); }\n    });\n\n    Object.defineProperty(Oath, 'oncomplete', {\n      set: function(fn) { addListener('complete', fn); }\n    });\n\n    Object.defineProperty(Oath, 'onprogress', {\n      set: function(fn) { addListener('progress', fn); }\n    });\n\n    return Oath;\n  })(t);\n\n  if (cb) done.thunk(cb);\n  return done;\n}\n\n/**\n * ### thunk.wrap(method, [source context], [target context])\n *\n * Convert a node-compatible standard async function\n * to a thunk-style function.\n *\n * ```js\n * // no context required\n * var read = thunk.wrap(fs.read);\n *\n * // contexts required\n * function Server() {\n *   var serv = this._handle = http.createServer();\n *   this.listen = thunk.wrap(serv.listen, serv, this);\n * }\n * ```\n *\n * @param {Function} function or method\n * @param {Mixed} source context (for method)\n * @param {Mixed} target context (for callbacks)\n * @return {Function} add callback to stack\n * @api public\n */\n\nexports.wrap = function(method, sctx, tctx) {\n  return function() {\n    var argv = [].slice.call(arguments);\n    var done = createThunk(null, tctx);\n    argv[argv.length] = done;\n    sctx = sctx || null;\n    method.apply(sctx, argv);\n    return done.thunk;\n  };\n};\n"]},"metadata":{},"sourceType":"script"}