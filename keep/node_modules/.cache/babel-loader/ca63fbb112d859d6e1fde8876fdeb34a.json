{"ast":null,"code":"/*!\n * simple-assert\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar AssertionError = require('assertion-error');\n/*!\n * Primary export\n */\n\n\nvar exports = module.exports = assert;\n/*!\n * Expose AssertionError constructor\n */\n\nexports.AssertionError = AssertionError;\n/**\n * ### assert (expr[, msg])\n *\n * Perform a truthy assertion.\n *\n * ```js\n * var assert = require('simple-assert');\n * assert(true, 'true is truthy');\n * assert(1, '1 is truthy');\n * assert('string', 'string is truthy');\n * ```\n *\n * @param {Mixed} expression to test for truthiness\n * @param {String} message on failure\n * @throws AssertionError\n */\n\nfunction assert(expr, msg, ssf) {\n  if (!expr) {\n    throw new AssertionError(msg || 'Assertion Failed', null, ssf || arguments.callee);\n  }\n}\n/**\n * ### assert.not (expr[, msg])\n *\n * Perform a falsey assertion.\n *\n * ```js\n * db.get(123, function (err, doc) {\n *   assert.not(err, 'db.get returned error');\n *   // ...\n * });\n * ```\n *\n * @param {Mixed} express to test for falsiness\n * @param {String} messag eon failure\n * @throws AssertionError\n */\n\n\nexports.not = function (expr, msg) {\n  assert(!expr, msg, arguments.callee);\n};\n/**\n * ### assert.fail ([msg])\n *\n * Force an `AssertionError` to be thrown.\n *\n * ```js\n * switch (res.statusCode) {\n *   case 200:\n *     // ..\n *     break;\n *   case 404:\n *     // ..\n *     break;\n *   default:\n *     assert.fail('Unknown response statusCode');\n * }\n * ```\n *\n * @param {String} failure message\n * @throws AssertionError\n */\n\n\nexports.fail = function (msg) {\n  assert(false, msg, arguments.callee);\n};","map":{"version":3,"sources":["C:/Users/Sameer/Desktop/KeepClone/keep/node_modules/simple-assert/index.js"],"names":["AssertionError","require","exports","module","assert","expr","msg","ssf","arguments","callee","not","fail"],"mappings":"AAAA;;;;;;AAMA;;;AAIA,IAAIA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA5B;AAEA;;;;;AAIA,IAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,MAA/B;AAEA;;;;AAIAF,OAAO,CAACF,cAAR,GAAyBA,cAAzB;AAEA;;;;;;;;;;;;;;;;;AAiBA,SAASI,MAAT,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAI,CAACF,IAAL,EAAW;AACT,UAAM,IAAIL,cAAJ,CAAmBM,GAAG,IAAI,kBAA1B,EAA8C,IAA9C,EAAoDC,GAAG,IAAIC,SAAS,CAACC,MAArE,CAAN;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;AAiBAP,OAAO,CAACQ,GAAR,GAAc,UAAUL,IAAV,EAAgBC,GAAhB,EAAqB;AACjCF,EAAAA,MAAM,CAAC,CAACC,IAAF,EAAQC,GAAR,EAAaE,SAAS,CAACC,MAAvB,CAAN;AACD,CAFD;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAsBAP,OAAO,CAACS,IAAR,GAAe,UAAUL,GAAV,EAAe;AAC5BF,EAAAA,MAAM,CAAC,KAAD,EAAQE,GAAR,EAAaE,SAAS,CAACC,MAAvB,CAAN;AACD,CAFD","sourcesContent":["/*!\n * simple-assert\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar AssertionError = require('assertion-error');\n\n/*!\n * Primary export\n */\n\nvar exports = module.exports = assert;\n\n/*!\n * Expose AssertionError constructor\n */\n\nexports.AssertionError = AssertionError;\n\n/**\n * ### assert (expr[, msg])\n *\n * Perform a truthy assertion.\n *\n * ```js\n * var assert = require('simple-assert');\n * assert(true, 'true is truthy');\n * assert(1, '1 is truthy');\n * assert('string', 'string is truthy');\n * ```\n *\n * @param {Mixed} expression to test for truthiness\n * @param {String} message on failure\n * @throws AssertionError\n */\n\nfunction assert (expr, msg, ssf) {\n  if (!expr) {\n    throw new AssertionError(msg || 'Assertion Failed', null, ssf || arguments.callee);\n  }\n}\n\n/**\n * ### assert.not (expr[, msg])\n *\n * Perform a falsey assertion.\n *\n * ```js\n * db.get(123, function (err, doc) {\n *   assert.not(err, 'db.get returned error');\n *   // ...\n * });\n * ```\n *\n * @param {Mixed} express to test for falsiness\n * @param {String} messag eon failure\n * @throws AssertionError\n */\n\nexports.not = function (expr, msg) {\n  assert(!expr, msg, arguments.callee);\n};\n\n/**\n * ### assert.fail ([msg])\n *\n * Force an `AssertionError` to be thrown.\n *\n * ```js\n * switch (res.statusCode) {\n *   case 200:\n *     // ..\n *     break;\n *   case 404:\n *     // ..\n *     break;\n *   default:\n *     assert.fail('Unknown response statusCode');\n * }\n * ```\n *\n * @param {String} failure message\n * @throws AssertionError\n */\n\nexports.fail = function (msg) {\n  assert(false, msg, arguments.callee);\n};\n"]},"metadata":{},"sourceType":"script"}