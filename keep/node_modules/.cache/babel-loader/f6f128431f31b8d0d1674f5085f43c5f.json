{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Sameer\\\\Desktop\\\\KeepClone\\\\keep\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sameer\\\\Desktop\\\\KeepClone\\\\keep\\\\src\\\\containers\\\\notes.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport archive from \"../icons/archive.svg\";\nimport cancel from '../icons/cancel.png';\nimport Note from '../components/note';\nimport NotesModal from '../components/modal';\nimport { setTitle } from '../actions/settingsAction';\nimport { getActiveNotes, deleteNote, updateNote, createNote, toggleArchive, togglePin } from '../actions/notesAction';\nimport { getArchivedNotes } from '../actions/archivedActions';\nimport '../styles/notes.css';\n\nclass Notes extends React.Component {\n  constructor() {\n    super();\n\n    this.documentListener = e => {\n      if (document.getElementById(\"expandedCard\") && !document.getElementById(\"expandedCard\").contains(e.target)) {\n        this.handleClose({\n          isArchivedPage: false\n        });\n      }\n    };\n\n    this.getCurrentNote = () => {\n      const noteIds = this.props.location.search.split('?note=');\n      const noteId = noteIds.length > 1 ? noteIds[1] : '';\n      return decodeURI(noteId);\n    };\n\n    this.noteActions = async (e, id, type) => {\n      e.stopPropagation();\n      const _this$props = this.props,\n            deleteNote = _this$props.deleteNote,\n            getActiveNotes = _this$props.getActiveNotes,\n            toggleArchive = _this$props.toggleArchive,\n            getArchivedNotes = _this$props.getArchivedNotes,\n            togglePin = _this$props.togglePin;\n      const isArchivedPage = this.state.isArchivedPage;\n\n      switch (type) {\n        case 'archive':\n          toggleArchive(id);\n          break;\n\n        case 'delete':\n          deleteNote(id);\n          break;\n\n        case 'togglepin':\n          togglePin(id);\n          break;\n\n        case 'unarchive':\n          toggleArchive(id);\n          break;\n\n        default:\n          break;\n      }\n\n      if (isArchivedPage) {\n        getArchivedNotes();\n      } else {\n        getActiveNotes();\n      }\n    };\n\n    this.openNote = ({\n      id,\n      isNew,\n      isArchived\n    }) => {\n      if (!isNew) {\n        const notes = isArchived ? this.props.archived : this.props.notes;\n        const selectedNote = notes.filter(note => note.id.toString() === id.toString());\n        this.props.history.push(this.state.isArchivedPage ? `/archived?note=${id}` : `?note=${id}`);\n\n        if (selectedNote.length) {\n          this.setState({\n            openModal: true,\n            note: selectedNote[0],\n            isNew: false,\n            title: selectedNote[0].title,\n            description: selectedNote[0].description\n          });\n        }\n      } else {\n        this.setState({\n          openModal: true\n        });\n      }\n    };\n\n    this.handleTypeChange = ({\n      key\n    }) => {\n      this.setState(prevState => ({\n        note: _objectSpread({}, prevState.note, {\n          [key]: !prevState.note[key]\n        })\n      }));\n    };\n\n    this.handleChange = ({\n      key,\n      value\n    }) => {\n      const note = this.state.note;\n\n      const newNote = _objectSpread({}, note, {\n        [key]: value\n      });\n\n      this.setState({\n        note: newNote\n      });\n    };\n\n    this.handleClose = ({\n      isArchivedPage\n    }) => {\n      document.removeEventListener(\"click\", this.documentListener);\n\n      if (isArchivedPage) {\n        this.props.history.push(`/archived`);\n      } else {\n        const _this$props2 = this.props,\n              updateNote = _this$props2.updateNote,\n              getActiveNotes = _this$props2.getActiveNotes,\n              createNote = _this$props2.createNote;\n        const note = this.state.note;\n\n        if (note.title.length > 0 || note.description.length > 0) {\n          if (note.isNew) {\n            createNote(note);\n          } else {\n            updateNote(note);\n          }\n\n          getActiveNotes();\n          this.props.history.push(`/`);\n        }\n      }\n\n      this.setState({\n        openModal: false,\n        expandAddNewCard: false,\n        activeInputNewCard: false\n      });\n    };\n\n    this.state = {\n      openModal: false,\n      note: {\n        title: '',\n        description: '',\n        isArchived: false,\n        isPinned: false\n      },\n      isNew: false,\n      isArchivedPage: false,\n      expandAddNewCard: false,\n      activeInputNewCard: false\n    };\n  }\n\n  async componentDidMount() {\n    let isArchivedPage = false;\n\n    if (this.props.history.location.pathname.includes('archived')) {\n      isArchivedPage = true;\n      this.setState({\n        isArchivedPage\n      });\n    }\n\n    const setTitle = this.props.setTitle;\n\n    if (isArchivedPage) {\n      const getArchivedNotes = this.props.getArchivedNotes;\n      await getArchivedNotes();\n      setTitle(\"Archive\");\n    } else {\n      const getActiveNotes = this.props.getActiveNotes;\n      await getActiveNotes();\n      setTitle(\"Notes\");\n    }\n\n    const currentNoteId = this.getCurrentNote();\n\n    if (currentNoteId) {\n      this.openNote({\n        id: currentNoteId,\n        isNew: false,\n        isArchived: isArchivedPage\n      });\n    }\n  }\n\n  attachEventListener() {\n    document.addEventListener(\"click\", this.documentListener);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          notes = _this$props3.notes,\n          archived = _this$props3.archived,\n          settings = _this$props3.settings;\n    const _this$state = this.state,\n          openModal = _this$state.openModal,\n          note = _this$state.note,\n          isNew = _this$state.isNew,\n          isArchivedPage = _this$state.isArchivedPage;\n    const styleIcon = settings.darkMode ? {\n      filter: \"invert(1)\"\n    } : {\n      filter: \"invert(0.4)\"\n    };\n    const styleIcon1 = settings.darkMode ? {\n      filter: \"invert(0)\"\n    } : {\n      filter: \"invert(0.6)\"\n    };\n    const cardStyle = {\n      backgroundColor: settings.bgColor,\n      color: settings.fontColor,\n      border: \"1px solid #e5e5e5\"\n    };\n    const pinnedNotes = Object.keys(notes).filter(note => notes[note].isPinned);\n    const notPinnedNotes = Object.keys(notes).filter(note => !notes[note].isPinned);\n    const displayContent = !this.state.expandAddNewCard ? React.createElement(\"div\", {\n      id: \"notExpandedCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"dummy\",\n      style: {\n        backgroundColor: settings.bgColor\n      },\n      value: \"\",\n      onChange: () => {},\n      placeholder: \"Take a note\",\n      onClick: () => {\n        this.attachEventListener();\n        this.setState({\n          expandAddNewCard: true,\n          note: {\n            title: '',\n            description: '',\n            isNew: true\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      id: \"expandedCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Title\",\n      style: {\n        backgroundColor: settings.bgColor,\n        color: settings.fontColor\n      },\n      onChange: e => this.handleChange({\n        key: 'title',\n        value: e.target.value\n      }),\n      value: this.state.note.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Take a Note\",\n      autoFocus: true,\n      style: {\n        backgroundColor: settings.bgColor,\n        color: settings.fontColor\n      },\n      onChange: e => this.handleChange({\n        key: 'description',\n        value: e.target.value\n      }),\n      value: this.state.note.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"button-container \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: this.state.note.isArchived ? \"unArchive\" : \"archive\",\n      style: this.state.note.isArchived ? styleIcon1 : _objectSpread({\n        backgroundImage: `url(${archive})`\n      }, styleIcon),\n      onClick: () => this.handleTypeChange({\n        key: \"isArchived\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"pin\",\n      style: settings.darkMode ? {\n        filter: \"invert(0)\",\n        transform: note.isPinned ? \"rotate(180deg)\" : \"rotate(0)\"\n      } : {\n        filter: \"invert(0.6)\",\n        transform: note.isPinned ? \"rotate(180deg)\" : \"rotate(0)\"\n      },\n      onClick: () => this.handleTypeChange({\n        key: \"isPinned\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: _objectSpread({\n        backgroundImage: `url(${cancel})`\n      }, styleIcon),\n      className: \"close\",\n      onClick: () => this.handleClose({\n        isNew\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }))); // add condition for loader\n\n    if (!isArchivedPage) {\n      return React.createElement(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"new-note-super-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"new-note--container\",\n        style: _objectSpread({}, cardStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, displayContent)), pinnedNotes.length === 0 && notPinnedNotes.length === 0 ? React.createElement(\"div\", {\n        className: \"notes-super-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"heading\",\n        style: {\n          color: cardStyle.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Whoops nothing to see here... add data\")) : null, pinnedNotes.length !== 0 ? React.createElement(\"div\", {\n        className: \"notes-super-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"heading\",\n        style: {\n          color: cardStyle.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Pinned Notes\"), React.createElement(\"div\", {\n        className: \"notes--container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, pinnedNotes.map((note, index) => notes[note].isPinned ? React.createElement(Note, {\n        key: index,\n        style: cardStyle,\n        noteActions: this.noteActions,\n        note: notes[note],\n        darkMode: settings.darkMode,\n        openNote: this.openNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }) : null))) : null, React.createElement(\"div\", {\n        className: \"notes-super-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"heading\",\n        style: {\n          color: cardStyle.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, Object.keys(notes).length === 0 || pinnedNotes.length === 0 || notPinnedNotes.length === 0 ? \"\" : \"Others\"), React.createElement(\"div\", {\n        className: \"notes--container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, notPinnedNotes.map((note, index) => !notes[note].isPinned ? React.createElement(Note, {\n        key: index,\n        noteActions: this.noteActions,\n        note: notes[note],\n        darkMode: settings.darkMode,\n        openNote: this.openNote,\n        style: cardStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }) : null))), React.createElement(NotesModal, {\n        openModal: openModal,\n        note: note,\n        handleClose: this.handleClose,\n        isNew: isNew,\n        settings: settings,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }));\n    } else return React.createElement(\"div\", {\n      className: \"notes-super-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"heading\",\n      style: {\n        color: cardStyle.color,\n        marginTop: Object.keys(archived).length ? \"0\" : \"2rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, Object.keys(archived).length ? \"Archived Notes\" : \"Whoops nothing to see here...\"), React.createElement(\"div\", {\n      className: \"notes--container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, Object.keys(archived).map((note, index) => React.createElement(Note, {\n      key: index,\n      noteActions: this.noteActions,\n      note: archived[note],\n      darkMode: settings.darkMode,\n      openNote: this.openNote,\n      isArchived: true,\n      style: cardStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    })), React.createElement(NotesModal, {\n      openModal: openModal,\n      note: note,\n      handleClose: this.handleClose,\n      isNew: isNew,\n      settings: settings,\n      handleChange: this.handleChange,\n      isArchivedPage: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => _objectSpread({}, state);\n\nconst mapDispatchToProps = dispatch => ({\n  createNote: note => dispatch(createNote(note)),\n  getActiveNotes: () => dispatch(getActiveNotes()),\n  getArchivedNotes: () => dispatch(getArchivedNotes()),\n  updateNote: note => dispatch(updateNote(note)),\n  toggleArchive: id => dispatch(toggleArchive(id)),\n  togglePin: id => dispatch(togglePin(id)),\n  deleteNote: id => dispatch(deleteNote(id)),\n  setTitle: title => dispatch(setTitle(title))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);","map":{"version":3,"sources":["C:/Users/Sameer/Desktop/KeepClone/keep/src/containers/notes.js"],"names":["React","connect","cancel","Note","NotesModal","setTitle","getActiveNotes","deleteNote","updateNote","createNote","toggleArchive","togglePin","getArchivedNotes","Notes","Component","constructor","documentListener","e","document","getElementById","contains","target","handleClose","isArchivedPage","getCurrentNote","noteIds","props","location","search","split","noteId","length","decodeURI","noteActions","id","type","stopPropagation","state","openNote","isNew","isArchived","notes","archived","selectedNote","filter","note","toString","history","push","setState","openModal","title","description","handleTypeChange","key","prevState","handleChange","value","newNote","removeEventListener","expandAddNewCard","activeInputNewCard","isPinned","componentDidMount","pathname","includes","currentNoteId","attachEventListener","addEventListener","render","settings","styleIcon","darkMode","styleIcon1","cardStyle","backgroundColor","bgColor","color","fontColor","border","pinnedNotes","Object","keys","notPinnedNotes","displayContent","backgroundImage","archive","transform","width","map","index","marginTop","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport archive from '../icons/archive.svg'\nimport cancel from '../icons/cancel.png';\nimport Note from '../components/note';\nimport NotesModal from '../components/modal';\nimport { setTitle } from '../actions/settingsAction';\nimport { getActiveNotes, deleteNote, updateNote, createNote, toggleArchive, togglePin } from '../actions/notesAction';\nimport { getArchivedNotes } from '../actions/archivedActions';\nimport '../styles/notes.css';\n\nclass Notes extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            openModal: false,\n            note: {\n                title: '',\n                description: '',\n                isArchived: false,\n                isPinned: false\n            },\n            isNew: false,\n            isArchivedPage: false,\n            expandAddNewCard: false,\n            activeInputNewCard: false\n        }\n    }\n\n    async componentDidMount() {\n        let isArchivedPage = false;\n        if (this.props.history.location.pathname.includes('archived')) {\n            isArchivedPage = true;\n            this.setState({ isArchivedPage });\n        }\n        const { setTitle } = this.props\n\n        if (isArchivedPage) {\n            const { getArchivedNotes } = this.props;\n            await getArchivedNotes();\n            setTitle(\"Archive\")\n        } else {\n            const { getActiveNotes } = this.props;\n            await getActiveNotes();\n            setTitle(\"Notes\")\n        }\n\n        const currentNoteId = this.getCurrentNote();\n        if (currentNoteId) {\n            this.openNote({ id: currentNoteId, isNew: false, isArchived: isArchivedPage });\n        }\n\n\n    }\n    documentListener = (e) => {\n        if (document.getElementById(\"expandedCard\") && (!(document.getElementById(\"expandedCard\").contains(e.target)))) {\n            this.handleClose({ isArchivedPage: false })\n        }\n    }\n\n    attachEventListener() {\n        document.addEventListener(\"click\", this.documentListener)\n    }\n\n\n    getCurrentNote = () => {\n        const noteIds = this.props.location.search.split('?note=');\n        const noteId = noteIds.length > 1 ? noteIds[1] : '';\n        return decodeURI(noteId);\n    }\n\n    noteActions = async (e, id, type) => {\n        e.stopPropagation();\n        const { deleteNote, getActiveNotes, toggleArchive, getArchivedNotes, togglePin } = this.props;\n        const { isArchivedPage } = this.state;\n        switch (type) {\n            case 'archive':\n                toggleArchive(id);\n                break;\n            case 'delete':\n                deleteNote(id);\n                break;\n            case 'togglepin':\n                togglePin(id);\n                break;\n            case 'unarchive':\n                toggleArchive(id);\n                break;\n            default:\n                break;\n        }\n        if (isArchivedPage) {\n            getArchivedNotes();\n        } else {\n            getActiveNotes();\n        }\n    }\n\n    openNote = ({ id, isNew, isArchived }) => {\n        if (!isNew) {\n            const notes = isArchived ? this.props.archived : this.props.notes;\n            const selectedNote = notes.filter(note => (note.id.toString() === id.toString()));\n            this.props.history.push(this.state.isArchivedPage ? `/archived?note=${id}` : `?note=${id}`);\n            if (selectedNote.length) {\n                this.setState({ openModal: true, note: selectedNote[0], isNew: false, title: selectedNote[0].title, description: selectedNote[0].description });\n            }\n        } else {\n            this.setState({ openModal: true })\n        }\n\n    }\n\n    handleTypeChange = ({ key }) => {\n        this.setState(prevState => ({ note: { ...prevState.note, [key]: !prevState.note[key] } }))\n    }\n    handleChange = ({ key, value }) => {\n\n        const { note } = this.state;\n        const newNote = { ...note, [key]: value }\n        this.setState({ note: newNote });\n    }\n\n    handleClose = ({ isArchivedPage }) => {\n        document.removeEventListener(\"click\", this.documentListener)\n        if (isArchivedPage) {\n            this.props.history.push(`/archived`);\n        } else {\n            const { updateNote, getActiveNotes, createNote } = this.props;\n            const { note } = this.state;\n            if (note.title.length > 0 || note.description.length > 0) {\n                if (note.isNew) {\n                    createNote(note);\n                } else {\n                    updateNote(note);\n                }\n                getActiveNotes();\n                this.props.history.push(`/`);\n            }\n        }\n        this.setState({ openModal: false, expandAddNewCard: false, activeInputNewCard: false });\n    }\n\n    render() {\n        const { notes, archived, settings } = this.props;\n        const { openModal, note, isNew, isArchivedPage } = this.state;\n        const styleIcon = settings.darkMode ? { filter: \"invert(1)\" } : { filter: \"invert(0.4)\" }\n        const styleIcon1 = settings.darkMode ? { filter: \"invert(0)\" } : { filter: \"invert(0.6)\" }\n        const cardStyle = {\n            backgroundColor: settings.bgColor,\n            color: settings.fontColor,\n            border: \"1px solid #e5e5e5\"\n        };\n        const pinnedNotes = Object.keys(notes).filter((note) => notes[note].isPinned)\n        const notPinnedNotes = Object.keys(notes).filter((note) => !notes[note].isPinned)\n\n        const displayContent = !this.state.expandAddNewCard ?\n            <div id=\"notExpandedCard\">\n                <input\n                    id=\"dummy\"\n                    style={{ backgroundColor: settings.bgColor }}\n                    value=\"\"\n                    onChange={() => { }}\n                    placeholder=\"Take a note\" onClick={() => {\n                        this.attachEventListener()\n                        this.setState({ expandAddNewCard: true, note: { title: '', description: '', isNew: true } })\n                    }} />\n            </div> : <div id=\"expandedCard\" >\n                <input\n                    placeholder=\"Title\"\n                    style={{ backgroundColor: settings.bgColor, color: settings.fontColor }}\n                    onChange={e => this.handleChange({ key: 'title', value: e.target.value })}\n                    value={this.state.note.title} />\n                <textarea\n                    placeholder=\"Take a Note\"\n                    autoFocus={true}\n                    style={{ backgroundColor: settings.bgColor, color: settings.fontColor }}\n                    onChange={e => this.handleChange({ key: 'description', value: e.target.value })}\n                    value={this.state.note.description} />\n                <div className=\"button-container \">\n                    <div\n                        className={this.state.note.isArchived ? \"unArchive\" : \"archive\"}\n                        style={this.state.note.isArchived ? styleIcon1 : { backgroundImage: `url(${archive})`, ...styleIcon }}\n                        onClick={() => this.handleTypeChange({ key: \"isArchived\" })}></div>\n                    <div className=\"pin\"\n                        style={settings.darkMode ? { filter: \"invert(0)\", transform: note.isPinned ? \"rotate(180deg)\" : \"rotate(0)\" }\n                            : { filter: \"invert(0.6)\", transform: note.isPinned ? \"rotate(180deg)\" : \"rotate(0)\" }}\n                        onClick={() => this.handleTypeChange({ key: \"isPinned\" })}></div>\n                    <div style={{ backgroundImage: `url(${cancel})`, ...styleIcon }}\n                        className=\"close\"\n                        onClick={() => this.handleClose({ isNew })}></div>\n                </div>\n            </div>\n        // add condition for loader\n        if (!isArchivedPage) {\n            return (\n                <div style={{ width: \"100%\" }}>\n                    <div className=\"new-note-super-container\">\n                        <div className=\"new-note--container\" style={{ ...cardStyle }} >\n                            {displayContent}\n                        </div>\n                    </div>\n                    {pinnedNotes.length === 0 && notPinnedNotes.length === 0 ?\n                        <div className=\"notes-super-container\">\n                            <span className=\"heading\" style={{ color: cardStyle.color }}>{\"Whoops nothing to see here... add data\"}</span>\n                        </div> : null\n                    }\n                    {pinnedNotes.length !== 0 ? <div className=\"notes-super-container\">\n                        <p className=\"heading\" style={{ color: cardStyle.color }}>{\"Pinned Notes\"}</p>\n                        <div className=\"notes--container\">\n                            {pinnedNotes.map((note, index) => notes[note].isPinned ?\n                                <Note key={index} style={cardStyle}\n                                    noteActions={this.noteActions}\n                                    note={notes[note]}\n                                    darkMode={settings.darkMode}\n                                    openNote={this.openNote} /> : null)}\n                        </div>\n                    </div> : null}\n                    <div className=\"notes-super-container\">\n                        <p className=\"heading\" style={{ color: cardStyle.color }}>\n                            {Object.keys(notes).length === 0 || pinnedNotes.length === 0 || notPinnedNotes.length === 0 ? \"\" : \"Others\"}\n                        </p>\n                        <div className=\"notes--container\">\n                            {notPinnedNotes.map((note, index) => !notes[note].isPinned ?\n                                <Note key={index}\n                                    noteActions={this.noteActions}\n                                    note={notes[note]}\n                                    darkMode={settings.darkMode}\n                                    openNote={this.openNote}\n                                    style={cardStyle} /> : null)}\n                        </div>\n                    </div>\n                    <NotesModal\n                        openModal={openModal}\n                        note={note}\n                        handleClose={this.handleClose}\n                        isNew={isNew}\n                        settings={settings}\n                        handleChange={this.handleChange} />\n                </div>\n            )\n        } else\n            return (\n                <div className=\"notes-super-container\">\n                    <p className=\"heading\"\n                        style={{\n                            color: cardStyle.color,\n                            marginTop: Object.keys(archived).length ? \"0\" : \"2rem\"\n                        }}>\n                        {Object.keys(archived).length ? \"Archived Notes\" :\n                            \"Whoops nothing to see here...\"}</p>\n                    <div className=\"notes--container\">\n                        {Object.keys(archived).map((note, index) =>\n                            <Note key={index}\n                                noteActions={this.noteActions}\n                                note={archived[note]}\n                                darkMode={settings.darkMode}\n                                openNote={this.openNote}\n                                isArchived={true}\n                                style={cardStyle} />)}\n                        <NotesModal\n                            openModal={openModal}\n                            note={note}\n                            handleClose={this.handleClose}\n                            isNew={isNew}\n                            settings={settings}\n                            handleChange={this.handleChange} isArchivedPage={true} />\n                    </div>\n                </div>\n            )\n    }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n})\n\nconst mapDispatchToProps = dispatch => ({\n    createNote: (note) => dispatch(createNote(note)),\n    getActiveNotes: () => dispatch(getActiveNotes()),\n    getArchivedNotes: () => dispatch(getArchivedNotes()),\n    updateNote: (note) => dispatch(updateNote(note)),\n    toggleArchive: (id) => dispatch(toggleArchive(id)),\n    togglePin: (id) => dispatch(togglePin(id)),\n    deleteNote: id => dispatch(deleteNote(id)),\n    setTitle: (title) => dispatch(setTitle(title))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);\n"]},"metadata":{},"sourceType":"module"}