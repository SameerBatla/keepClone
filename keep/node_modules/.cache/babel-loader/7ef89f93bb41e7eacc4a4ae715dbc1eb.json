{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Sameer\\\\Desktop\\\\KeepClone\\\\keep\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n// mocks api can be replaced to call any api\nimport { TEMP_NOTES } from '../constants/notesConstants';\nimport { generate } from 'short-id';\n\nconst initNotes = () => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes === null) {\n    localStorage.setItem('notes', JSON.stringify(TEMP_NOTES));\n  }\n};\n\nconst getActiveNotesApi = () => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    return jsonParsedNotes.filter(note => note.isArchived === false);\n  }\n};\n\nconst getArchivedNotesApi = () => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    return jsonParsedNotes.filter(note => note.isArchived === true);\n  }\n};\n\nconst searchNotesApi = searchTerm => {\n  searchTerm = searchTerm.toLowerCase();\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    const keys = ['title', 'description'];\n    return jsonParsedNotes.filter(note => {\n      return keys.some(key => {\n        return String(note[key]).toLowerCase().includes(searchTerm);\n      });\n    });\n  }\n};\n\nconst updateNoteApi = updatedNote => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    const newNotes = jsonParsedNotes.map(note => note.id === updatedNote.id ? updatedNote : note);\n    localStorage.setItem('notes', JSON.stringify(newNotes));\n    return true;\n  }\n};\n\nconst createNoteApi = newNote => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    jsonParsedNotes.push({\n      id: generate(),\n      title: newNote.title || '',\n      description: newNote.description || '',\n      isArchived: newNote.isArchived || false,\n      isPinned: newNote.isPinned || false\n    });\n    localStorage.setItem('notes', JSON.stringify(jsonParsedNotes));\n    return true;\n  }\n};\n\nconst deleteNoteApi = id => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    const newNotes = jsonParsedNotes.filter(note => note.id !== id);\n    localStorage.setItem('notes', JSON.stringify(newNotes));\n    return true;\n  }\n};\n\nconst toggleArchiveApi = id => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    const newNotes = jsonParsedNotes.map(note => note.id === id ? _objectSpread({}, note, {\n      isArchived: !note.isArchived\n    }) : note);\n    localStorage.setItem('notes', JSON.stringify(newNotes));\n    return true;\n  }\n};\n\nconst togglePinApi = id => {\n  const notes = localStorage.getItem('notes');\n\n  if (notes !== null) {\n    const jsonParsedNotes = JSON.parse(notes);\n    const newNotes = jsonParsedNotes.map(note => note.id === id ? _objectSpread({}, note, {\n      isPinned: !note.isPinned\n    }) : note);\n    localStorage.setItem('notes', JSON.stringify(newNotes));\n    return true;\n  }\n};\n\nexport { initNotes, getActiveNotesApi, getArchivedNotesApi, searchNotesApi, updateNoteApi, createNoteApi, deleteNoteApi, toggleArchiveApi, togglePinApi };","map":{"version":3,"sources":["C:/Users/Sameer/Desktop/KeepClone/keep/src/apis/notesApi.js"],"names":["TEMP_NOTES","generate","initNotes","notes","localStorage","getItem","setItem","JSON","stringify","getActiveNotesApi","jsonParsedNotes","parse","filter","note","isArchived","getArchivedNotesApi","searchNotesApi","searchTerm","toLowerCase","keys","some","key","String","includes","updateNoteApi","updatedNote","newNotes","map","id","createNoteApi","newNote","push","title","description","isPinned","deleteNoteApi","toggleArchiveApi","togglePinApi"],"mappings":"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","sourcesContent":["// mocks api can be replaced to call any api\nimport { TEMP_NOTES } from '../constants/notesConstants';\nimport { generate } from 'short-id';\n\nconst initNotes = () => {\n    const notes = localStorage.getItem('notes');\n    if (notes === null) {\n        localStorage.setItem('notes', JSON.stringify(TEMP_NOTES));\n    }\n}\n\nconst getActiveNotesApi = () => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        return jsonParsedNotes.filter(note => note.isArchived === false);\n    }\n}\n\nconst getArchivedNotesApi = () => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        return jsonParsedNotes.filter(note => note.isArchived === true);\n    }\n}\n\nconst searchNotesApi = searchTerm => {\n    searchTerm = searchTerm.toLowerCase();\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        const keys = ['title', 'description'];\n        return jsonParsedNotes.filter((note) => {\n            return keys.some((key) => {\n                return String(note[key]).toLowerCase().includes(searchTerm);\n            });\n        });\n    }\n}\n\nconst updateNoteApi = updatedNote => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        const newNotes = jsonParsedNotes.map(note => note.id === updatedNote.id ? updatedNote : note);\n        localStorage.setItem('notes', JSON.stringify(newNotes));\n        return true;\n    }\n}\n\nconst createNoteApi = newNote => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        jsonParsedNotes.push({\n            id: generate(),\n            title: newNote.title || '',\n            description: newNote.description || '',\n            isArchived: newNote.isArchived || false,\n            isPinned: newNote.isPinned || false\n        })\n        localStorage.setItem('notes', JSON.stringify(jsonParsedNotes));\n        return true;\n    }\n}\n\nconst deleteNoteApi = id => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        const newNotes = jsonParsedNotes.filter(note => note.id !== id);\n        localStorage.setItem('notes', JSON.stringify(newNotes));\n        return true;\n    }\n}\n\nconst toggleArchiveApi = id => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        const newNotes = jsonParsedNotes.map(note => note.id === id ? {...note, isArchived: !note.isArchived } : note);\n        localStorage.setItem('notes', JSON.stringify(newNotes));\n        return true;\n    }\n}\n\nconst togglePinApi = id => {\n    const notes = localStorage.getItem('notes');\n    if (notes !== null) {\n        const jsonParsedNotes = JSON.parse(notes);\n        const newNotes = jsonParsedNotes.map(note => note.id === id ? {...note, isPinned: !note.isPinned } : note);\n        localStorage.setItem('notes', JSON.stringify(newNotes));\n        return true;\n    }\n}\n\nexport {\n    initNotes,\n    getActiveNotesApi,\n    getArchivedNotesApi,\n    searchNotesApi,\n    updateNoteApi,\n    createNoteApi,\n    deleteNoteApi,\n    toggleArchiveApi,\n    togglePinApi,\n}"]},"metadata":{},"sourceType":"module"}